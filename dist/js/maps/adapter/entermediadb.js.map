{"version":3,"sources":["adapter/node_modules/browserify/node_modules/browser-pack/_prelude.js","adapter/src/js/adapter/entermediadb/index.js","adapter/entermediadb.js","adapter/src/js/adapter/entermediadb/template.html"],"names":["f","exports","module","define","amd","g","window","global","self","this","AssetPickerAdapterEntermediadb","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","template","http","options","base","config","url","replace","validate","response","data","json","status","login","username","password","callback","post","id","isValid","then","results","reload","category","search","items","extensions","watch","appConfig.pick","handler","oldTerms","assembleTerms","newTerms","hash","pop","loadAssets","immediate","dateFormat","methods","terms","pushTerm","field","operator","value","push","join","query","JSON","stringify","result","Array","prototype","apply","total","loading","page","pages","$promise","resolve","hitsperpage","parseInt","totalhits","forEach","asset","item","createItem","type","isfolder","name","assettitle","primaryfile","title","extension","fileformat","created","parseDate","assetcreationdate","assetaddeddate","modified","assetmodificationdate","thumbnail","encodeURI","sourcepath","bind","events","select-item","$parent","$dispatch","load-more-items","sword","category-load-items","tree","map","category-select-item","selected","./template.html","2"],"mappings":"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","file":"adapter/entermediadb.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = {\n    template: require('./template.html'),\n    http: function() {\n        var options = {\n            base: this.config.url.replace(/\\/+$/, '') + '/mediadb/services',\n            validate: function (response) {\n                response.data = response.json();\n                if (response.data.response.status !== 'ok') {\n                    this.login(function(username, password, callback) {\n                        this.http.post('authentication/login', {id: username, password: password}, {validate: function (response) {\n                            response.data = response.json();\n                            response.isValid(response.data.response.status === 'ok');\n                        }}).then(\n                            function (response) {\n                                callback(response.data.results.status !== 'invalidlogin');\n                            }\n                        );\n                    }).then(response.reload);\n                } else {\n                    response.isValid();\n                }\n            }\n        };\n        return options;\n    },\n    data: function () {\n        return {\n            category: null,\n            search: null,\n            items: null,\n            results: {},\n            extensions: null\n        }\n    },\n    watch: {\n        'appConfig.pick': {\n            handler: function (config) {\n                // Reload latest items when extensions have changed\n                var oldTerms = this.assembleTerms();\n                this.extensions = config.extensions;\n                var newTerms = this.assembleTerms();\n                if (oldTerms.hash !== newTerms.hash && this.results[oldTerms.hash]) {\n                    var items = this.results[oldTerms.hash].items;\n                    while (items.length > 0) {\n                        items.pop();\n                    }\n                    this.loadAssets(items);\n                }\n            },\n            immediate: true\n        }\n    },\n    dateFormat: 'YYYY-MM-DDTHH:mm:ss',\n    methods: {\n        assembleTerms: function () {\n            var terms = [],\n                pushTerm = function (field, operator, value) {\n                    terms.push({field: field, operator: operator, value: value});\n                };\n            if (this.category) {\n                pushTerm('category', 'exact', this.category.id);\n            }\n            if (this.search) {\n                pushTerm('description', 'freeform', this.search);\n            }\n            if (this.extensions && this.extensions.length) {\n                pushTerm('fileformat', 'matches', this.extensions.join('|'))\n            }\n            if (!terms.length) {\n                pushTerm('id', 'matches', '*');\n            }\n            return terms;\n        },\n        loadAssets: function (items) {\n            var terms = this.assembleTerms();\n            var query = JSON.stringify(terms);\n            var result = this.results[query];\n            if (!result) {\n                result = {page: 0, pages: 0, items: items || []};\n                result.items.total = result.items.total || result.items.length;\n                this.results[query] = result;\n            } else {\n                if (items && result.items !== items) {\n                    Array.prototype.push.apply(items, result.items);\n                    items.total = result.items.total;\n                    items.loading = result.items.loading;\n                    items.query = query;\n                    result.items = items;\n                }\n                if (result.page === result.pages) {\n                    return this.$promise(function (resolve) {\n                        resolve(result);\n                    });\n                }\n            }\n\n            result.items.loading = true;\n            result.items.query = query;\n\n            return this.http.post(\n                'module/asset/search',\n                {\n                    page: '' + (result.page + 1),\n                    hitsperpage: '20',\n                    query: {\n                        terms: terms\n                    }\n                }\n            ).then((function(response) {\n                if (result.items.query === query) {\n                    result.page = parseInt(response.data.response.page);\n                    result.pages = parseInt(response.data.response.pages);\n                    result.items.total = parseInt(response.data.response.totalhits);\n                    result.items.loading = false;\n                    response.data.results.forEach((function (asset) {\n                        var item = this.createItem({\n                            id: asset.id,\n                            query: query,\n                            type: asset.isfolder ? 'file' : 'dir',\n                            name: asset.assettitle || asset.name || asset.primaryfile,\n                            title: asset.assettitle,\n                            extension: asset.fileformat.id,\n                            created: this.parseDate(asset.assetcreationdate || asset.assetaddeddate),\n                            modified: this.parseDate(asset.assetmodificationdate),\n                            thumbnail: this.url(\n                                '/emshare/views/modules/asset/downloads/preview/thumb/' +\n                                encodeURI(asset.sourcepath) + '/thumb.jpg',\n                                this.config.url\n                            ),\n                            data: asset\n                        });\n                        result.items.push(item);\n                    }).bind(this));\n                }\n                return result;\n            }).bind(this));\n        }\n    },\n    events: {\n        'select-item': function (item) {\n            if (item === 'entrypoint') {\n                this.category = null;\n                this.search = null;\n                this.loadAssets().then((function(response) {\n                    this.items = response.items;\n                    this.$parent.$dispatch('select-item', this);\n                }).bind(this));\n            } else {\n                return true;\n            }\n        },\n        'load-more-items': function (results) {\n            this.loadAssets(results);\n        },\n        'search': function (sword, results) {\n            this.search = sword;\n            this.loadAssets(results);\n            return true;\n        },\n        'category-load-items': function (tree) {\n            this.http.post(\n                'lists/search/category',\n                {\n                    hitsperpage: '100',\n                    query: {\n                        terms: [\n                            {\n                                field: 'parentid',\n                                operator: 'exact',\n                                value: tree.item ? tree.item.id : 'index'\n                            }\n                        ]\n                    }\n                }\n            ).then(function (response) {\n                tree.items = response.data.results.map((function(category) {\n                    return this.createItem({\n                        id: category.id,\n                        name: category.name,\n                        type: 'category',\n                        data: category\n                    });\n                }).bind(this));\n            });\n        },\n        'category-select-item': function (tree) {\n            this.category = tree.item;\n            this.search = null;\n            this.loadAssets(tree.items).then(function (response) {\n                if (tree.selected) {\n                    this.$dispatch('select-item', tree);\n                }\n            }.bind(this));\n        }\n    }\n};\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.AssetPickerAdapterEntermediadb = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nmodule.exports = {\n    template: require('./template.html'),\n    http: function() {\n        var options = {\n            base: this.config.url.replace(/\\/+$/, '') + '/mediadb/services',\n            validate: function (response) {\n                response.data = response.json();\n                if (response.data.response.status !== 'ok') {\n                    this.login(function(username, password, callback) {\n                        this.http.post('authentication/login', {id: username, password: password}, {validate: function (response) {\n                            response.data = response.json();\n                            response.isValid(response.data.response.status === 'ok');\n                        }}).then(\n                            function (response) {\n                                callback(response.data.results.status !== 'invalidlogin');\n                            }\n                        );\n                    }).then(response.reload);\n                } else {\n                    response.isValid();\n                }\n            }\n        };\n        return options;\n    },\n    data: function () {\n        return {\n            category: null,\n            search: null,\n            items: null,\n            results: {},\n            extensions: null\n        }\n    },\n    watch: {\n        'appConfig.pick': {\n            handler: function (config) {\n                // Reload latest items when extensions have changed\n                var oldTerms = this.assembleTerms();\n                this.extensions = config.extensions;\n                var newTerms = this.assembleTerms();\n                if (oldTerms.hash !== newTerms.hash && this.results[oldTerms.hash]) {\n                    var items = this.results[oldTerms.hash].items;\n                    while (items.length > 0) {\n                        items.pop();\n                    }\n                    this.loadAssets(items);\n                }\n            },\n            immediate: true\n        }\n    },\n    dateFormat: 'YYYY-MM-DDTHH:mm:ss',\n    methods: {\n        assembleTerms: function () {\n            var terms = [],\n                pushTerm = function (field, operator, value) {\n                    terms.push({field: field, operator: operator, value: value});\n                };\n            if (this.category) {\n                pushTerm('category', 'exact', this.category.id);\n            }\n            if (this.search) {\n                pushTerm('description', 'freeform', this.search);\n            }\n            if (this.extensions && this.extensions.length) {\n                pushTerm('fileformat', 'matches', this.extensions.join('|'))\n            }\n            if (!terms.length) {\n                pushTerm('id', 'matches', '*');\n            }\n            return terms;\n        },\n        loadAssets: function (items) {\n            var terms = this.assembleTerms();\n            var query = JSON.stringify(terms);\n            var result = this.results[query];\n            if (!result) {\n                result = {page: 0, pages: 0, items: items || []};\n                result.items.total = result.items.total || result.items.length;\n                this.results[query] = result;\n            } else {\n                if (items && result.items !== items) {\n                    Array.prototype.push.apply(items, result.items);\n                    items.total = result.items.total;\n                    items.loading = result.items.loading;\n                    items.query = query;\n                    result.items = items;\n                }\n                if (result.page === result.pages) {\n                    return this.$promise(function (resolve) {\n                        resolve(result);\n                    });\n                }\n            }\n\n            result.items.loading = true;\n            result.items.query = query;\n\n            return this.http.post(\n                'module/asset/search',\n                {\n                    page: '' + (result.page + 1),\n                    hitsperpage: '20',\n                    query: {\n                        terms: terms\n                    }\n                }\n            ).then((function(response) {\n                if (result.items.query === query) {\n                    result.page = parseInt(response.data.response.page);\n                    result.pages = parseInt(response.data.response.pages);\n                    result.items.total = parseInt(response.data.response.totalhits);\n                    result.items.loading = false;\n                    response.data.results.forEach((function (asset) {\n                        var item = this.createItem({\n                            id: asset.id,\n                            query: query,\n                            type: asset.isfolder ? 'file' : 'dir',\n                            name: asset.assettitle || asset.name || asset.primaryfile,\n                            title: asset.assettitle,\n                            extension: asset.fileformat.id,\n                            created: this.parseDate(asset.assetcreationdate || asset.assetaddeddate),\n                            modified: this.parseDate(asset.assetmodificationdate),\n                            thumbnail: this.url(\n                                '/emshare/views/modules/asset/downloads/preview/thumb/' +\n                                encodeURI(asset.sourcepath) + '/thumb.jpg',\n                                this.config.url\n                            ),\n                            data: asset\n                        });\n                        result.items.push(item);\n                    }).bind(this));\n                }\n                return result;\n            }).bind(this));\n        }\n    },\n    events: {\n        'select-item': function (item) {\n            if (item === 'entrypoint') {\n                this.category = null;\n                this.search = null;\n                this.loadAssets().then((function(response) {\n                    this.items = response.items;\n                    this.$parent.$dispatch('select-item', this);\n                }).bind(this));\n            } else {\n                return true;\n            }\n        },\n        'load-more-items': function (results) {\n            this.loadAssets(results);\n        },\n        'search': function (sword, results) {\n            this.search = sword;\n            this.loadAssets(results);\n            return true;\n        },\n        'category-load-items': function (tree) {\n            this.http.post(\n                'lists/search/category',\n                {\n                    hitsperpage: '100',\n                    query: {\n                        terms: [\n                            {\n                                field: 'parentid',\n                                operator: 'exact',\n                                value: tree.item ? tree.item.id : 'index'\n                            }\n                        ]\n                    }\n                }\n            ).then(function (response) {\n                tree.items = response.data.results.map((function(category) {\n                    return this.createItem({\n                        id: category.id,\n                        name: category.name,\n                        type: 'category',\n                        data: category\n                    });\n                }).bind(this));\n            });\n        },\n        'category-select-item': function (tree) {\n            this.category = tree.item;\n            this.search = null;\n            this.loadAssets(tree.items).then(function (response) {\n                if (tree.selected) {\n                    this.$dispatch('select-item', tree);\n                }\n            }.bind(this));\n        }\n    }\n};\n\n},{\"./template.html\":2}],2:[function(require,module,exports){\nmodule.exports = '<div>\\n    <tree :fetch=\"fetch\" name=\"category\" :types=\"[\\'category\\']\"></tree>\\n</div>';\n},{}]},{},[1])(1)\n});\n\n","module.exports = '<div>\\n    <tree :fetch=\"fetch\" name=\"category\" :types=\"[\\'category\\']\"></tree>\\n</div>';"],"sourceRoot":"/source/"}