!function n(t,e,i){function o(r,a){if(!e[r]){if(!t[r]){var c="function"==typeof require&&require;if(!a&&c)return c(r,!0);if(s)return s(r,!0);var d=new Error("Cannot find module '"+r+"'");throw d.code="MODULE_NOT_FOUND",d}var l=e[r]={exports:{}};t[r][0].call(l.exports,function(n){var e=t[r][1][n];return o(e?e:n)},l,l.exports,n,t,e,i)}return e[r].exports}for(var s="function"==typeof require&&require,r=0;r<i.length;r++)o(i[r]);return o}({1:[function(n,t,e){function i(){var n=document.createElement("style");return n.setAttribute("type","text/css"),n}var o=[],s=[];t.exports=function(n,t){t=t||{};var e=t.prepend===!0?"prepend":"append",r=void 0!==t.container?t.container:document.querySelector("head"),a=o.indexOf(r);a===-1&&(a=o.push(r)-1,s[a]={});var c;return void 0!==s[a]&&void 0!==s[a][e]?c=s[a][e]:(c=s[a][e]=i(),"prepend"===e?r.insertBefore(c,r.childNodes[0]):r.appendChild(c)),c.styleSheet?c.styleSheet.cssText+=n:c.textContent+=n,c}},{}],2:[function(n,t,e){t.exports=".assetpicker-modal {\n    position: fixed;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    background: rgba(0, 0, 0, 0);\n    z-index: -1;\n    transition: background 0.2s, z-index 0s 0.2s;\n}\n.assetpicker-modal.assetpicker-modal-open {\n    z-index:3000;\n    background: rgba(0, 0, 0, 0.8);\n    transition: background 0.2s\n}\n.assetpicker-modal .assetpicker-modal-inner {\n    position: absolute;\n    left:30px;\n    right:30px;\n    top:30px;\n    bottom:30px;\n    background: #fff;\n    opacity: 0;\n    transition: opacity 0.1s 0.1s;\n    border-radius: 4px;\n    overflow: hidden;\n}\n.assetpicker-modal.assetpicker-modal-open .assetpicker-modal-inner {\n    opacity: 1;\n}\n.assetpicker-modal .assetpicker-modal-inner iframe {\n    position: absolute;\n    width:100%;\n    height: 100%;\n    overflow: hidden;\n    border: none;\n}\n"},{}],3:[function(n,t,e){t.exports='<div class="assetpicker-modal">\n    <div class="assetpicker-modal-inner">\n        <iframe src="">\n            Ehm, without iframes i ain\'t do nothing.\n        </iframe>\n    </div>\n</div>\n'},{}],4:[function(n,t,e){var i=n("insert-css"),o=function(n,t){n.className.split(" ").indexOf(t)===-1&&(n.className+=" "+t)},s=function(n,t){for(var e=n.className.split(" "),i=[],o=0,s=e.length;o<s;o++)e[o]!==t&&i.push(e[o]);n.className=i.join(" ")},r=function(){var n=document.createElement("div"),t={transition:"transitionend",OTransition:"otransitionend",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(var e in t)if(t.hasOwnProperty(e)&&void 0!==n.style[e])return t[e]}(),a=function(n){var t=window.getComputedStyle(n,null),e=["transitionDuration","oTransitionDuration","MozTransitionDuration","webkitTransitionDuration"],i=e.filter(function(n){if("string"==typeof t[n]&&t[n].match(/[1-9]/))return!0});return!!i.length};t.exports=n("../../util/createClass")({construct:function(n){n&&Object.keys(n).forEach(function(t){this.options[t]=n[t]}.bind(this))},options:{template:n("./index.html"),css:n("./index.css"),openClassName:"assetpicker-modal-open",src:null},modal:null,frame:null,render:function(){this.options.css&&i(this.options.css);var n=document.createElement("div");n.innerHTML=this.options.template,this.modal=n.children[0],this.modal.addEventListener("click",function(n){n.target===this.modal&&this.close()}.bind(this)),this.frame=this.modal.querySelector("iframe"),document.body.appendChild(this.modal),this._modalClass=this.modal.className},open:function(){if(!this.modal){this.render();var n=this;return void window.setTimeout(function(){n.open()},1)}this.frame.src=this.options.src,o(this.modal,this.options.openClassName)},_closed:function(){this.frame.src=""},close:function(){if(r&&a(this.modal)){var n=function(){this.modal.removeEventListener(r,n),this._closed()}.bind(this);this.modal.addEventListener(r,n)}else this._closed();s(this.modal,this.options.openClassName)}})},{"../../util/createClass":6,"./index.css":2,"./index.html":3,"insert-css":1}],5:[function(n,t,e){var i=n("./components/modal"),o=function(){var n=document.getElementsByTagName("script");return n[n.length-1].src}(),s=n("./util/createClass")({construct:function(n){document.addEventListener("DOMContentLoaded",this.init.bind(this)),this.options.modal.src||(this.options.modal.src=o.split("/").slice(0,-3).join("/"))},modal:null,options:{app:{},input:{selector:'[rel="assetpicker"]'},modal:{src:null}},trustedOrigin:null,init:function(){var n=this.options.modal.src.match(/^http:\/\/[^\/]+/);this.trustedOrigin=n?n[0]:document.location.origin,this.modal=new i(this.options.modal),document.querySelectorAll(this.options.input.selector).forEach(this.initInput.bind(this));var t=window.addEventListener?"addEventListener":"attachEvent",e=window[t],o="attachEvent"==t?"onmessage":"message";e(o,function(n){var t=n.origin||n.originalEvent.origin;t===this.trustedOrigin&&this.handleMessageFromApp(n.data)}.bind(this),!1)},initInput:function(n){n.addEventListener("click",function(n){n.preventDefault(),this.modal.open()}.bind(this))},handleMessageFromApp:function(n){"cancel"===n&&this.modal.close()}});window.AssetPicker=new s},{"./components/modal":4,"./util/createClass":6}],6:[function(n,t,e){t.exports=function(n){var t=n.construct||function(){};return Object.keys(n).forEach(function(e){"construct"!==e&&(t.prototype[e]=n[e])}),t}},{}]},{},[5]);
//# sourceMappingURL=data:application/json;base64,
